/**
 * @fileoverview added by tsickle
 * Generated from: performance.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule, Optional } from '@angular/core';
import { AngularFirePerformance } from './performance';
import { PerformanceMonitoringService } from './performance.service';
import * as ɵngcc0 from '@angular/core';
export class AngularFirePerformanceModule {
    /**
     * @param {?} perf
     * @param {?} _
     */
    constructor(perf, _) {
        // call anything here to get perf loading
        // tslint:disable-next-line:no-unused-expression
        perf.dataCollectionEnabled.then((/**
         * @return {?}
         */
        () => { }));
    }
}
AngularFirePerformanceModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AngularFirePerformanceModule });
AngularFirePerformanceModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function AngularFirePerformanceModule_Factory(t) { return new (t || AngularFirePerformanceModule)(ɵngcc0.ɵɵinject(AngularFirePerformance), ɵngcc0.ɵɵinject(PerformanceMonitoringService, 8)); }, providers: [AngularFirePerformance] });
/** @nocollapse */
AngularFirePerformanceModule.ctorParameters = () => [
    { type: AngularFirePerformance },
    { type: PerformanceMonitoringService, decorators: [{ type: Optional }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AngularFirePerformanceModule, [{
        type: NgModule,
        args: [{
                providers: [AngularFirePerformance]
            }]
    }], function () { return [{ type: AngularFirePerformance }, { type: PerformanceMonitoringService, decorators: [{
                type: Optional
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyZm9ybWFuY2UubW9kdWxlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ob21lL3J1bm5lci93b3JrL2FuZ3VsYXJmaXJlL2FuZ3VsYXJmaXJlL3NyYy9wZXJmb3JtYW5jZS9wZXJmb3JtYW5jZS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkQsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sdUJBQXVCLENBQUM7O0FBS3JFLE1BQU0sT0FBTyw0QkFBNEI7QUFDekM7QUFBUTtBQUNRO0FBQ2Q7QUFBUSxJQUZSLFlBQ0UsSUFBNEIsRUFDaEIsQ0FBK0I7QUFDNUMsUUFDQyx5Q0FBeUM7QUFDN0MsUUFBSSxnREFBZ0Q7QUFDcEQsUUFBSSxJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSTtBQUFNO0FBRzlCO0FBQVksUUFIYSxHQUFHLEVBQUUsR0FBRSxDQUFDLEVBQUMsQ0FBQztBQUM5QyxJQUFFLENBQUM7QUFDSDt3REFaQyxRQUFRLFNBQUMsa0JBQ1IsU0FBUztDQUFFLENBQUUsc0JBQXNCLENBQUUsY0FDdEMsd1FBQ0k7QUFBQztBQUFtQjtBQUVMLFlBUlgsc0JBQXNCO0FBQUksWUFDMUIsNEJBQTRCLHVCQVFoQyxRQUFRO0FBQU07Ozs7Ozs7O2tDQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFuZ3VsYXJGaXJlUGVyZm9ybWFuY2UgfSBmcm9tICcuL3BlcmZvcm1hbmNlJztcbmltcG9ydCB7IFBlcmZvcm1hbmNlTW9uaXRvcmluZ1NlcnZpY2UgfSBmcm9tICcuL3BlcmZvcm1hbmNlLnNlcnZpY2UnO1xuXG5ATmdNb2R1bGUoe1xuICBwcm92aWRlcnM6IFsgQW5ndWxhckZpcmVQZXJmb3JtYW5jZSBdXG59KVxuZXhwb3J0IGNsYXNzIEFuZ3VsYXJGaXJlUGVyZm9ybWFuY2VNb2R1bGUge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwZXJmOiBBbmd1bGFyRmlyZVBlcmZvcm1hbmNlLFxuICAgIEBPcHRpb25hbCgpIF86IFBlcmZvcm1hbmNlTW9uaXRvcmluZ1NlcnZpY2VcbiAgKSB7XG4gICAgLy8gY2FsbCBhbnl0aGluZyBoZXJlIHRvIGdldCBwZXJmIGxvYWRpbmdcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tdW51c2VkLWV4cHJlc3Npb25cbiAgICBwZXJmLmRhdGFDb2xsZWN0aW9uRW5hYmxlZC50aGVuKCgpID0+IHt9KTtcbiAgfVxufVxuIl19